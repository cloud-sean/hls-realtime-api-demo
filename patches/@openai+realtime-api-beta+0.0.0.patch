diff --git a/node_modules/@openai/realtime-api-beta/lib/api.js b/node_modules/@openai/realtime-api-beta/lib/api.js
index cc8f904..aca19e5 100644
--- a/node_modules/@openai/realtime-api-beta/lib/api.js
+++ b/node_modules/@openai/realtime-api-beta/lib/api.js
@@ -4,20 +4,21 @@ import { RealtimeUtils } from './utils.js';
 export class RealtimeAPI extends RealtimeEventHandler {
   /**
    * Create a new RealtimeAPI instance
-   * @param {{url?: string, apiKey?: string, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]
+   * @param {{url?: string, apiKey?: string, azure?: boolean, dangerouslyAllowAPIKeyInBrowser?: boolean, debug?: boolean}} [settings]
    * @returns {RealtimeAPI}
    */
-  constructor({ url, apiKey, dangerouslyAllowAPIKeyInBrowser, debug } = {}) {
+  constructor({ url, apiKey, azure = false, dangerouslyAllowAPIKeyInBrowser, debug } = {}) {
     super();
     this.defaultUrl = 'wss://api.openai.com/v1/realtime';
     this.url = url || this.defaultUrl;
     this.apiKey = apiKey || null;
+    this.azure = azure;
     this.debug = !!debug;
     this.ws = null;
     if (globalThis.document && this.apiKey) {
       if (!dangerouslyAllowAPIKeyInBrowser) {
         throw new Error(
-          `Can not provide API key in the browser without "dangerouslyAllowAPIKeyInBrowser" set to true`,
+          `Cannot provide API key in the browser without "dangerouslyAllowAPIKeyInBrowser" set to true`,
         );
       }
     }
@@ -53,52 +54,53 @@ export class RealtimeAPI extends RealtimeEventHandler {
 
   /**
    * Connects to Realtime API Websocket Server
-   * @param {{model?: string}} [settings]
+   * @param {{model?: string, deployment?: string}} [settings]
    * @returns {Promise<true>}
    */
-  async connect({ model } = { model: 'gpt-4o-realtime-preview-2024-10-01' }) {
+  async connect({ model, deployment } = {}) {
     if (!this.apiKey && this.url === this.defaultUrl) {
       console.warn(`No apiKey provided for connection to "${this.url}"`);
     }
     if (this.isConnected()) {
       throw new Error(`Already connected`);
     }
-    if (globalThis.WebSocket) {
+    if (globalThis.document) {
       /**
        * Web browser
        */
-      if (globalThis.document && this.apiKey) {
-        console.warn(
-          'Warning: Connecting using API key in the browser, this is not recommended',
-        );
-      }
       const WebSocket = globalThis.WebSocket;
-      const ws = new WebSocket(`${this.url}${model ? `?model=${model}` : ''}`, [
-        'realtime',
-        `openai-insecure-api-key.${this.apiKey}`,
-        'openai-beta.realtime-v1',
-      ]);
+      let wsUrl;
+      if (this.azure) {
+        if (!deployment) {
+          throw new Error('Deployment name must be provided for Azure OpenAI');
+        }
+        const apiVersion = '2024-10-01-preview';
+        wsUrl = `${this.url}/openai/realtime?api-version=${apiVersion}&deployment=${deployment}&api-key=${this.apiKey}`;
+      } else {
+        wsUrl = `${this.url}${model ? `?model=${model}` : ''}`;
+      }
+      const ws = new WebSocket(wsUrl);
       ws.addEventListener('message', (event) => {
         const message = JSON.parse(event.data);
         this.receive(message.type, message);
       });
       return new Promise((resolve, reject) => {
-        const connectionErrorHandler = () => {
+        const connectionErrorHandler = (err) => {
           this.disconnect(ws);
-          reject(new Error(`Could not connect to "${this.url}"`));
+          reject(new Error(`Could not connect to "${wsUrl}": ${err.message}`));
         };
         ws.addEventListener('error', connectionErrorHandler);
         ws.addEventListener('open', () => {
-          this.log(`Connected to "${this.url}"`);
+          this.log(`Connected to "${wsUrl}"`);
           ws.removeEventListener('error', connectionErrorHandler);
-          ws.addEventListener('error', () => {
+          ws.addEventListener('error', (err) => {
             this.disconnect(ws);
-            this.log(`Error, disconnected from "${this.url}"`);
+            this.log(`Error, disconnected from "${wsUrl}": ${err.message}`);
             this.dispatch('close', { error: true });
           });
           ws.addEventListener('close', () => {
             this.disconnect(ws);
-            this.log(`Disconnected from "${this.url}"`);
+            this.log(`Disconnected from "${wsUrl}"`);
             this.dispatch('close', { error: false });
           });
           this.ws = ws;
@@ -112,39 +114,38 @@ export class RealtimeAPI extends RealtimeEventHandler {
       const moduleName = 'ws';
       const wsModule = await import(/* webpackIgnore: true */ moduleName);
       const WebSocket = wsModule.default;
-      const ws = new WebSocket(
-        'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01',
-        [],
-        {
-          finishRequest: (request) => {
-            // Auth
-            request.setHeader('Authorization', `Bearer ${this.apiKey}`);
-            request.setHeader('OpenAI-Beta', 'realtime=v1');
-            request.end();
-          },
-        },
-      );
+      let wsUrl;
+      if (this.azure) {
+        if (!deployment) {
+          throw new Error('Deployment name must be provided for Azure OpenAI');
+        }
+        const apiVersion = '2024-10-01-preview';
+        wsUrl = `${this.url}/openai/realtime?api-version=${apiVersion}&deployment=${deployment}&api-key=${this.apiKey}`;
+      } else {
+        wsUrl = `${this.url}${model ? `?model=${model}` : ''}`;
+      }
+      const ws = new WebSocket(wsUrl);
       ws.on('message', (data) => {
         const message = JSON.parse(data.toString());
         this.receive(message.type, message);
       });
       return new Promise((resolve, reject) => {
-        const connectionErrorHandler = () => {
+        const connectionErrorHandler = (err) => {
           this.disconnect(ws);
-          reject(new Error(`Could not connect to "${this.url}"`));
+          reject(new Error(`Could not connect to "${wsUrl}": ${err.message}`));
         };
         ws.on('error', connectionErrorHandler);
         ws.on('open', () => {
-          this.log(`Connected to "${this.url}"`);
+          this.log(`Connected to "${wsUrl}"`);
           ws.removeListener('error', connectionErrorHandler);
-          ws.on('error', () => {
+          ws.on('error', (err) => {
             this.disconnect(ws);
-            this.log(`Error, disconnected from "${this.url}"`);
+            this.log(`Error, disconnected from "${wsUrl}": ${err.message}`);
             this.dispatch('close', { error: true });
           });
           ws.on('close', () => {
             this.disconnect(ws);
-            this.log(`Disconnected from "${this.url}"`);
+            this.log(`Disconnected from "${wsUrl}"`);
             this.dispatch('close', { error: false });
           });
           this.ws = ws;
